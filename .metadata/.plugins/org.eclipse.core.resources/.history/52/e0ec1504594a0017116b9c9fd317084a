/////////////////////////////////////////////////////////////////////////////
//Fichier Regle.cpp
/////////////////////////////////////////////////////////////////////////////
/**
 * \file Regle.cpp
 * \brief Ce fichier contient une implantation des méthodes de la classe Regle
 * \author ?
 * \version 0.5
 * \date mai 2017
 *
 */

#include "Regle.h"
/**
 * \namespace tp1
 * \brief Namespace du tp1 contenant la classe ListeCirculaire.
 */
namespace tp1
{
	/**
	 *  \brief Constructeur par défaut
	 *
	 *  \post Une instance de la classe Regle est initialisée
	 */
	Regle::Regle() {
	}
	/**
	 *  \brief Constructeur de copie.
	 *
	 * \pre Il faut qu'il y ait suffisamment de mémoire
	 * \post La liste passée en paramètre est copiée
	 * \param[in] r La copie de règle
	 * \exception bad_alloc s'il n'y a pas assez de mémoire
	 */
	Regle::Regle(const Regle& r) {
		premisses=r.premisses;
		conclusions=r.conclusions;
	}
	/**
	 *  \brief Destructeur
	 *  \post Le destructeur la liste stl s'occupe de la desrtuction
	 *  des éléments prémisses et conclusions.
	 */
	Regle::~Regle() {
	}
	/**
	 * \brief Surcharge de l'opérateur =
	 *
	 * \pre Il y a assez de mémoire pour l'opération
	 * \post La liste passée en paramètre est copiée
	 * \param[in] r la copie de règle
	 * \exception bad_alloc si la précondition n'est pas respectée
	 */
	Regle& Regle::operator =(const Regle& r) {
			return *this == r;
	}
	/**
	 * \brief Surcharge de l'opérateur ==
	 *
	 * \pre Il y a assez de mémoire pour l'opération
	 * \post La liste passée en paramètre est copiée
	 * \param[in] r la copie de règle
	 * \exception bad_alloc si la précondition n'est pas respectée
	 */
	bool Regle::operator ==(const Regle& r) {
		return premisses == r.premisses && conclusions == r.conclusions;

	}
	/**
	 * \brief Surcharge de l'opérateur !=
	 *
	 * \pre Il y a assez de mémoire pour l'opération
	 * \post La liste passée en paramètre est copiée
	 * \param[in] r la copie de règle
	 * \exception bad_alloc si la précondition n'est pas respectée
	 */
	bool Regle::operator !=(const Regle& r) {
		return premisses != r.premisses && conclusions != r.conclusions;
	}

}

