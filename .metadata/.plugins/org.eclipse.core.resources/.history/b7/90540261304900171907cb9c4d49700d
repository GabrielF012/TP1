/**
 * \file SystemeExpert.cpp
 * \brief Ce fichier contient une implantation des méthodes de la classe SystemeExpert
 * \author ?
 * \version 0.5
 * \date juin 2017
 *
 */

#include "SystemeExpert.h"

/**
 * \namespace tp1
 * \brief Namespace du tp1 contenant la classe ListeCirculaire.
 */
namespace tp1{

/**
	 *  \brief Constructeur par défaut
	 *
	 *  \post Une instance de la classe SystemeExpert est initialisée
	 */
	SystemeExpert::SystemeExpert(){

	}

	SystemeExpert::~SystemeExpert(){

	}
	/**
	 *  \brief Constructeur de copie.
	 *
	 * \pre Il faut qu'il y ait suffisamment de mémoire
	 * \post La liste passée en paramètre est copiée
	 * \param[in] r La copie de systemeExpert
	 * \exception bad_alloc s'il n'y a pas assez de mémoire
	 */
	SystemeExpert::SystemeExpert(const SystemeExpert & se){
		baseRegles = se.baseRegles;
		baseFaits = se.baseFaits;
	}
	/**
	 * \brief Surcharge de l'opérateur =
	 *
	 * \pre Il y a assez de mémoire pour l'opération
	 * \post La liste passée en paramètre est copiée
	 * \param[in] r la copie de règle
	 * \exception bad_alloc si la précondition n'est pas respectée
	 */
	SystemeExpert & SystemeExpert::operator = (const SystemeExpert & se){

	}
	void SystemeExpert::ajouterRegleSE(const Regle & tr){
		if (!baseRegles.appartient(tr)){
			baseRegles.ajouter(tr, baseRegles.taille()+1);
		}
	}

	void SystemeExpert::ajouterFaitSE(const TypeFait & tf){
		auto ajouter = false;
		for (auto el : baseFaits ){
			if(tf == el){
				ajouter = true;
			}
		}
		if (!ajouter){
			baseFaits.push_back(tf);
		}
	}

	void SystemeExpert::chargerSE(std::ifstream & EntreeFichier){

	}

	void SystemeExpert::sauvegarderSE(std::ofstream & SortieFichier) const{

	}

	void SystemeExpert::chainageAvant(ListeCirculaire<Regle> & er){

	}
}

